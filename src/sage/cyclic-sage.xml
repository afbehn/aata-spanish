<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section xml:id="cyclic-sage">
	<title>Sage</title>

	<introduction>
		<p>Los grupos cíclicos son muy importantes, así es que no es una sorpresa que aparezcan en diferentes formas en Sage.  Cada una de estas es ligeramente diferente, y ninguna de ellas es ideal para una introducción, pero juntas pueden ilustrar la mayor parte de las ideas importantes.  Aquí hay una guía a las diferentes formas de construir, y estudiar, un grupo cíclico en Sage.</p>
	</introduction>

	<subsection>
		<title>Grupos Cíclicos de Orden Infinito</title>

		<p>En Sage, los enteros <m>\mathbb Z</m> se construyen con <c>ZZ</c>.  Para construir un grupo cíclico infinito tal como <m>3\mathbb Z</m> del Ejemplo<nbsp /><xref ref="example-cyclic-z3" />, simplemente use <c>3*ZZ</c>.  Como conjunto infinito, no es mucho lo que se pueda hacer con esto.  Se puede determinar si un entero está en el conjunto o no.  También es posible recuperar el generador con el comando <c>.gen()</c>.</p>

		<sage>
			<input>
			G = 3*ZZ
			-12 in G
			</input>
			<output>True</output>
		</sage>

		<sage>
			<input>
			37 in G
			</input>
			<output>False</output>
		</sage>

		<sage>
			<input>
			G.gen()
			</input>
			<output>3</output>
		</sage>

		</subsection>

		<subsection>
		<title>Grupos Cíclicos Aditivos</title>

		<p>El grupo cíclico aditivo <m>\mathbb Z_n</m> se puede construir como un caso especial de una construcción más general en Sage.  Primer definimos  <m>\mathbb Z_{14}</m> y capturamos su generador.  En lo que sigue, preste especial atención al uso de paréntesis y corchetes para cuando realice sus propios ensayos.</p>

		<sage>
			<input>
			G = AdditiveAbelianGroup([14])
			G.order()
			</input>
			<output>14</output>
		</sage>

		<sage>
			<input>G.list()</input>
			<output>
			[(0), (1), (2), (3), (4), (5), (6), (7),
			 (8), (9), (10), (11), (12), (13)]
			</output>
		</sage>

		<sage>
			<input>
			a = G.gen(0)
			a
			</input>
			<output>(1)</output>
		</sage>

		<p>Se puede calcular en este grupo, usando el generador, usando elementos nuevos obtenidos de coercionar enteros a pertenecer al grupo, o tomando el resultado de operaciones con otros elementos.  Podemos obtener el orden de los elementos en este grupo.  Note que podemos abreviar la suma repetida de elementos usando la multiplicación de un elemento por un número entero.</p>

		<sage>
			<input>
			a + a
			</input>
			<output>(2)</output>
		</sage>

		<sage>
			<input>
			a + a + a + a
			</input>
			<output>(4)</output>
		</sage>

		<sage>
			<input>
			4*a
			</input>
			<output>(4)</output>
		</sage>

		<sage>
			<input>
			37*a
			</input>
			<output>(9)</output>
		</sage>

		<p>Podemos crear, y después calcular con, elementos del grupo obtenidos a partir de la coerción de un entero (en una lista de largo <m>1</m>) al grupo.  Es posible que obtenga una advertencia <c>DeprecationWarning</c> la primera vez que use esta sintaxis para crear un nuevo elemento.  Esta misteriosa advertencia puede ser ignorada sin problemas.</p>

		<!-- Only to doctesting, warning to disappear "a few months" after 2015/05/20      -->
		<!-- This test evokes the warning, then next one tests fine, as it normally should -->
		<!-- Adjust sentence above once it goes away -->
		<!-- Used ... below to mark out a line number that doctesting complained about -->

		<sage doctest="invisible">
			<input>
			G([2])
			</input>
			<output>
			doctest:...: DeprecationWarning: The default behaviour changed! If you
			*really* want a linear combination of smith generators, use
			.linear_combination_of_smith_form_gens.
			See http://trac.sagemath.org/16261 for details.
			(2)
			</output>
		</sage>

		<sage>
			<input>
			b = G([2]); b
			</input>
			<output>(2)</output>
		</sage>

		<sage>
			<input>
			b + b
			</input>
			<output>(4)</output>
		</sage>

		<sage>
			<input>
			2*b == 4*a
			</input>
			<output>True</output>
		</sage>

		<sage>
			<input>
			7*b
			</input>
			<output>(0)</output>
		</sage>

		<sage>
			<input>
			b.order()
			</input>
			<output>7</output>
		</sage>

		<sage>
			<input>
			c = a - 6*b; c
			</input>
			<output>(3)</output>
		</sage>

		<sage>
			<input>
			c + c + c + c
			</input>
			<output>(12)</output>
		</sage>

		<sage>
			<input>
			c.order()
			</input>
			<output>14</output>
		</sage>

		<p>Es posible crear subgrupos cíclicos, a partir de un elemento designado como nuevo generador.  Desafortunadamente, hacer esto requiere usar el método <c>.submodule()</c> (que debiera ser renombrado en Sage).</p>

		<sage>
			<input>H = G.submodule([b]); H</input>
			<output>Additive abelian group isomorphic to Z/7</output>
		</sage>

		<sage>
			<input>H.list()</input>
			<output>[(0), (2), (4), (6), (8), (10), (12)]</output>
		</sage>

		<sage>
			<input>H.order()</input>
			<output>7</output>
		</sage>

		<sage>
			<input>e = H.gen(0); e</input>
			<output>(2)</output>
		</sage>

		<sage>
			<input>3*e</input>
			<output>(6)</output>
		</sage>

		<sage>
			<input>e.order()</input>
			<output>7</output>
		</sage>

		<p>El subgrupo cíclico <c>H</c> recién creado tiene más de un generador.  Podemos verificar esto construyendo un nuevo subgrupo y comparando ambos subgrupos.</p>

		<sage>
			<input>f = 12*a; f</input>
			<output>(12)</output>
		</sage>

		<sage>
			<input>f.order()</input>
			<output>7</output>
		</sage>

		<sage>
			<input>K = G.submodule([f]); K</input>
			<output>Additive abelian group isomorphic to Z/7</output>
		</sage>

		<sage>
			<input>K.order()</input>
			<output>7</output>
		</sage>

		<sage>
			<input>K.list()</input>
			<output>[(0), (2), (4), (6), (8), (10), (12)]</output>
		</sage>

		<sage>
			<input>K.gen(0)</input>
			<output>(2)</output>
		</sage>

		<sage>
			<input>H == K</input>
			<output>True</output>
		</sage>

		<p>Ciertamente la lista de elementos, y el generador común <c>(2)</c> nos hacen pensar que  <c>H</c> y <c>K</c> son el mismo, pero la comparación en la última línea no deja lugar a dudas.</p>

		<p>Los resultados en en esta sección, especialmente el Teorema<nbsp /><xref ref="theorem-cyclic-orders" /> y el Corolario<nbsp /><xref ref="corollary-cyclic-modngenerators" />, pueden ser investigados creando generadores de subgrupos a partir de un generador de un grupo cíclico aditivo, creando los subgrupos, y calculando los órdenes tanto de los elementos como de los grupos.</p>
	</subsection>

	<subsection>
		<title>Grupos Multiplicativos Abstractos</title>

		<p>Podemos crear un grupo cíclico abstracto al estilo de los Teoremas<nbsp /><xref ref="theorem-cyclic-subgroup" />, <xref ref="theorem-cyclic-abelian" />, <xref ref="theorem-cyclic-subgroups" />.  En la sintaxis que sigue <c>a</c> es un nombre para el generador, y <c>14</c> es el orden del elemento.  Note que la notación es ahora multiplicativa, así es que multiplicamos los elementos, y los productos repetidos pueden ser escritos como potencias.</p>

		<sage>
			<input>
			G.&lt;a&gt; = AbelianGroup([14])
			G.order()
			</input>
			<output>14</output>
		</sage>

		<sage>
			<input>G.list()</input>
			<output>(1, a, a^2, a^3, a^4, a^5, a^6, a^7, a^8, a^9, a^10, a^11, a^12, a^13)</output>
		</sage>

		<sage>
			<input>a.order()</input>
			<output>14</output>
		</sage>

		<p>Los cálculos en el grupo son similares a como eran antes, solo con una notación diferente.  Ahora son productos, con productos repetidos escritos como potencias.</p>

		<sage>
			<input>
			b = a^2
			b.order()
			</input>
			<output>7</output>
		</sage>

		<sage>
			<input>b*b*b</input>
			<output>a^6</output>
		</sage>

		<sage>
			<input>
			c = a^7
			c.order()
			</input>
			<output>2</output>
		</sage>

		<sage>
			<input>c^2</input>
			<output>1</output>
		</sage>

		<sage>
			<input>b*c</input>
			<output>a^9</output>
		</sage>

		<sage>
			<input>b^37*c^42</input>
			<output>a^4</output>
		</sage>

		<p>Subgrupos se pueden formar con el comando <c>.subgroup()</c>.  Pero no intente listar los elementos del subgrupo, se verán algo extraños.  Tampoco está implementada la comparación de subgrupos.</p>

		<sage>
			<input>
			H = G.subgroup([a^2])
			H.order()
			</input>
			<output>7</output>
		</sage>

		<sage>
			<input>
			K = G.subgroup([a^12])
			K.order()
			</input>
			<output>7</output>
		</sage>

		<!-- Subgroup equality is buggy, L and H are the subgroup of order 7 -->
		<sage type="hidden">
			<input>
				L = G.subgroup([a^4])
				H == L
			</input>
			<output>False</output>
		</sage>

		<p>Una ventaja de esta implementación es la posibilidad de crear todos los posibles subgrupos.  Acá crearemos la lista de subgrupos, extraemos uno en particular  (el tercero) y obtenemos su orden.</p>

		<sage>
			<input>
			allsg = G.subgroups(); allsg
			</input>
			<output>
			[Multiplicative Abelian subgroup isomorphic to C2 x C7 generated by {a},
			 Multiplicative Abelian subgroup isomorphic to C7 generated by {a^2},
			 Multiplicative Abelian subgroup isomorphic to C2 generated by {a^7},
			 Trivial Abelian subgroup]
			</output>
		</sage>

		<sage>
			<input>
			sub = allsg[2]
			sub.order()
			</input>
			<output>2</output>
		</sage>
	</subsection>

	<subsection>
		<title>Grupos Cíclicos de Permutaciones</title>

		<p>Aprenderemos más sobre los grupos de permutaciones en el siguiente capítulo.  Pero acá mencionaremos que es fácil crear grupos cíclicos como grupos de permutaciones, y diversos métodos para trabajar con ellos están disponibles, aunque los elementos en sí se tornan algo incómodos para trabajar.  Tal como antes, observemos que la notación es multiplicativa.</p>

		<sage>
			<input>
			G=CyclicPermutationGroup(14)
			a = G.gen(0); a
			</input>
			<output>(1,2,3,4,5,6,7,8,9,10,11,12,13,14)</output>
		</sage>

		<sage>
			<input>
			b = a^2
			b = a^2; b
			</input>
			<output>(1,3,5,7,9,11,13)(2,4,6,8,10,12,14)</output>
		</sage>

		<sage>
			<input>b.order()</input>
			<output>7</output>
		</sage>

		<sage>
			<input>a*a*b*b*b</input>
			<output>(1,9,3,11,5,13,7)(2,10,4,12,6,14,8)</output>
		</sage>

		<sage>
			<input>c = a^37*b^26; c</input>
			<output>(1,6,11,2,7,12,3,8,13,4,9,14,5,10)</output>
		</sage>

		<sage>
			<input>c.order()</input>
			<output>14</output>
		</sage>

		<p>Podemos crear subgrupos, obtener sus órdenes, y listar sus elementos.</p>

		<sage>
			<input>
			H = G.subgroup([a^2])
			H.order()
			</input>
			<output>7</output>
		</sage>

		<sage>
			<input>H.gen(0)</input>
			<output>(1,3,5,7,9,11,13)(2,4,6,8,10,12,14)</output>
		</sage>

		<sage>
			<input>H.list()</input>
			<output>
			[(),
			 (1,3,5,7,9,11,13)(2,4,6,8,10,12,14),
			 (1,5,9,13,3,7,11)(2,6,10,14,4,8,12),
			 (1,7,13,5,11,3,9)(2,8,14,6,12,4,10),
			 (1,9,3,11,5,13,7)(2,10,4,12,6,14,8),
			 (1,11,7,3,13,9,5)(2,12,8,4,14,10,6),
			 (1,13,11,9,7,5,3)(2,14,12,10,8,6,4)]
			</output>
		</sage>

		<p>Puede ser de ayuda visualizar este grupo, y el subgrupo, como rotaciones de un dodecágono regular con vértices etiquetados con los enteros del <m>1</m> al <m>12</m>.  Este no es el grupo completo de simetrías, pues no incluye las reflexiones, solamente las  <m>12</m> rotaciones.</p>

		</subsection>

		<subsection>
		<title>Tablas de Cayley</title>

		<p>Como grupos, cada uno de los ejemplos anteriores (grupos y subgrupos) tienen implementadas sus tablas de Cayley en Sage.  Como los grupos son cíclicos, y por ende también lo son sus subgrupos, las tablas de Cayley deberían seguir un patrón similarmente <q>cíclico</q>.  Note que las letras usadas en la tabla obtenida por defecto son genéricas, y no están relacionadas a las letras usadas antes para elementos específicos <mdash /> solo corresponden a los elementos del grupo en el orden dado por <c>.list()</c>.</p>

		<sage>
			<input>
			G.&lt;a&gt; = AbelianGroup([14])
			G.cayley_table()
			</input>
			<output>
			*  a b c d e f g h i j k l m n
			 +----------------------------
			a| a b c d e f g h i j k l m n
			b| b c d e f g h i j k l m n a
			c| c d e f g h i j k l m n a b
			d| d e f g h i j k l m n a b c
			e| e f g h i j k l m n a b c d
			f| f g h i j k l m n a b c d e
			g| g h i j k l m n a b c d e f
			h| h i j k l m n a b c d e f g
			i| i j k l m n a b c d e f g h
			j| j k l m n a b c d e f g h i
			k| k l m n a b c d e f g h i j
			l| l m n a b c d e f g h i j k
			m| m n a b c d e f g h i j k l
			n| n a b c d e f g h i j k l m
			</output>
		</sage>

		<p>Si los nombres reales de los elemetnos del grupo no son muy complicados (o largos), la tabla puede resultar más informativa usando estos nombres.</p>

		<sage>
			<input>
			K.&lt;b&gt; = AbelianGroup([10])
			K.cayley_table(names='elements')
			</input>
			<output>
			  *    1   b b^2 b^3 b^4 b^5 b^6 b^7 b^8 b^9
			   +----------------------------------------
			  1|   1   b b^2 b^3 b^4 b^5 b^6 b^7 b^8 b^9
			  b|   b b^2 b^3 b^4 b^5 b^6 b^7 b^8 b^9   1
			b^2| b^2 b^3 b^4 b^5 b^6 b^7 b^8 b^9   1   b
			b^3| b^3 b^4 b^5 b^6 b^7 b^8 b^9   1   b b^2
			b^4| b^4 b^5 b^6 b^7 b^8 b^9   1   b b^2 b^3
			b^5| b^5 b^6 b^7 b^8 b^9   1   b b^2 b^3 b^4
			b^6| b^6 b^7 b^8 b^9   1   b b^2 b^3 b^4 b^5
			b^7| b^7 b^8 b^9   1   b b^2 b^3 b^4 b^5 b^6
			b^8| b^8 b^9   1   b b^2 b^3 b^4 b^5 b^6 b^7
			b^9| b^9   1   b b^2 b^3 b^4 b^5 b^6 b^7 b^8
			</output>
		</sage>
	</subsection>

	<subsection>
		<title>Raíces Complejas de la Unidad</title>

		<p>Los subgrupos cíclicos finitos de <m>{\mathbb T}</m>, generados por una raíz primitiva  <m>n</m>-ésima de la unidad están implementados como una construcción mayor en Sage, conocida como cuerpo ciclotómico.  Si uno se concentra solamente en la multiplicación de potencias de un generador (ignorando la infinidad de otros elementos) entonces se tiene un grupo cíclico finito.  Como esto no está implementado en Sage como grupo <foreign>per se</foreign>, es un poco más difícil hacer construcciones tales como subgrupos, pero es un excelente ejercicio intentarlo.  Es un bonito ejemplo pues los números complejos constituyen una construcción concreta familiar.  Acá unos pocos ejemplos de cálculos para proveerle de algunas herramientas exploratorias.  Vea las observaciones a continuación de los cálculos.</p>

		<sage>
			<input>
			G = CyclotomicField(14)
			w = G.gen(0); w
			</input>
			<output>zeta14</output>
		</sage>

		<sage>
			<input>
			wc = CDF(w)
			wc.abs()
			</input>
			<output>1.0</output>
		</sage>

		<sage>
			<input>wc.arg()/N(2*pi/14)</input>
			<output>1.0</output>
		</sage>

		<sage>
			<input>
			b = w^2
			b.multiplicative_order()
			</input>
			<output>7</output>
		</sage>

		<sage>
			<input>bc = CDF(b); bc</input>
			<output>0.62348980185... + 0.781831482468...*I</output>
		</sage>

		<sage>
			<input>bc.abs()</input>
			<output>1.0</output>
		</sage>

		<sage>
			<input>bc.arg()/N(2*pi/14)</input>
			<output>2.0</output>
		</sage>

		<sage>
			<input>sg = [b^i for i in range(7)]; sg</input>
			<output>
			[1, zeta14^2, zeta14^4,
			zeta14^5 - zeta14^4 + zeta14^3 - zeta14^2 + zeta14 - 1,
			-zeta14, -zeta14^3, -zeta14^5]
			</output>
		</sage>

		<sage>
			<input>
			c = sg[3]; d = sg[5]
			c*d
			</input>
			<output>zeta14^2</output>
		</sage>

		<sage>
			<input>
			c = sg[3]; d = sg[6]
			c*d in sg
			</input>
			<output>True</output>
		</sage>

		<sage>
			<input>c*d == sg[2]</input>
			<output>True</output>
		</sage>

		<sage>
			<input>sg[5]*sg[6] == sg[4]</input>
			<output>True</output>
		</sage>

		<sage>
			<input>G.multiplication_table(elements=sg)</input>
			<output>
			*  a b c d e f g
			 +--------------
			a| a b c d e f g
			b| b c d e f g a
			c| c d e f g a b
			d| d e f g a b c
			e| e f g a b c d
			f| f g a b c d e
			g| g a b c d e f
			</output>
		</sage>

		<p>Observaciones:<ol>
			<li><p><c>zeta14</c> es el nombre del generador usado para el cuerpo ciclotómico, es una raíz primitiva de la unidad (una raíz <m>14</m>-ésima en este caso).  La hemos capturado como <c>w</c>.</p></li>

			<li><p>La sintaxis <c>CDF(w)</c> convertirá al número complejo <c>w</c> a la notación más familiar con partes real e imaginaria.</p></li>

			<li><p>El método <c>.abs()</c> entrega el módulo del número complejo, <m>r</m> como está descrito en el texto.  Para estos elementos de <m>{\mathbb C}^\ast</m> debiera ser siempre igual a <m>1</m>.</p></li>

			<li><p>El método <c>.arg()</c> entrega el argumento de un número complejo, <m>\theta</m> como está descrito en el texto.  Cada elemento del grupo cíclico en este ejemplo debe tener un argumento que es un múltiplo entero de  <m>\frac{2\pi}{14}</m>.  La sintaxis <c>N()</c> convierte el valor simbólico de <c>pi</c> a una aproximación numérica.</p></li>

			<li><p><c>sg</c> es una lista de elementos que forma un subgrupo cíclico de orden 7, que consiste de las primeras potencias de <c>b = w^2</c>.  Así, por ejemplo, la última comparación multiplica la quinta potencia de <c>b</c> con la sexta potencia de <c>b</c>, lo que sería la undécima potencia de <c>b</c>.  Pero como <c>b</c> tiene orden 7, esto se reduce a la cuarta potencia.</p></li>

			<li><p>Si se sabe que un subconjunto de un grupo infinito forma un subgrupo, entonces se puede producir su tabla de Cayley especificando la lista de los elementos que se desean usar.  Acá pedimos una tabla de multipicación, pues esa es la operación relevante en este caso.</p></li>
		</ol></p>

	</subsection>
</section>