<?xml version="1.0" encoding="UTF-8" ?>

<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->

<section xml:id="groups-sage">
	<title>Sage</title>

	<introduction>
		<p>Muchos de los grupos discutidos en este capítulo están disponibles para ser estudiados en Sage.  Es importante entender que los conjuntos que forman objetos algebraicos (grupos en este capítulo) se llaman <q>parents</q> en Sage, y elementos de estos objetos se llaman <q>elements.</q>  Así cada element pertenece a un parent (en otras palabras, está contenido en algún conjunto).  Podemos preguntar por propiedades de los conjuntos (¿finito? ¿orden? ¿abeliano?), y podemos preguntar sobre propiedades de los elementos individuales (¿identidad? inverso?).  En lo que sigue mostraremos como crear algunos de estos grupos comunes y empezaremos a explorar sus propiedades con Sage.</p>
	</introduction>

	<subsection>
		<title>Enteros mód n</title>

		<sage>
			<input>
			Z8 = Integers(8)
			Z8
			</input>
			<output>Ring of integers modulo 8</output>
		</sage>

		<sage>
			<input>Z8.list()</input>
			<output>[0, 1, 2, 3, 4, 5, 6, 7]</output>
		</sage>

		<sage>
			<input>a = Z8.an_element(); a</input>
			<output>0</output>
		</sage>

		<sage>
			<input>a.parent()</input>
			<output>Ring of integers modulo 8</output>
		</sage>

		<p>Queremos trabajar con elementos de  <c>Z8</c>.  Si escribimos <c>6</c> en una celda Sage, ¿qué significará?  ¿El entero <m>6</m>, el número racional <m>\frac{6}{1}</m>, el número real <m>6.00000</m>, o el número complejo <m>6.00000+0.00000i</m>?  ¿O quizás lo que realmente queremos es el entero <m>6</m> mód <m>8</m>?  Sage no tiene idea sobre lo que queremos.  Para aclarárselo a Sage, lo que podemos hacer es <q>coercionar</q> <c>6</c> a <c>Z8</c> con la sintaxis <c>Z8(6)</c>.  Sin esto, Sage tratará una entrada como <c>6</c> como un entero, que en algún sentido es la interpretación más sencilla.  Analice lo siguiente cuidadosamente, primero trabajamos con enteros <q>normales</q> y luego con enteros mód 8.</p>

		<sage>
			<input>
			a = 6
			a
			</input>
			<output>6</output>
		</sage>

		<sage>
			<input>a.parent()</input>
			<output>Integer Ring</output>
		</sage>

		<sage>
			<input>
			b = 7
			c = a + b; c
			</input>
			<output>13</output>
		</sage>

		<sage>
			<input>
			d = Z8(6)
			d
			</input>
			<output>6</output>
		</sage>

		<sage>
			<input>d.parent()</input>
			<output>Ring of integers modulo 8</output>
		</sage>

		<sage>
			<input>
			e = Z8(7)
			f = d+e; f
			</input>
			<output>5</output>
		</sage>

		<sage>
			<input>g = Z8(85); g</input>
			<output>5</output>
		</sage>

		<sage>
			<input>f == g</input>
			<output>True</output>
		</sage>

		<p><c>Z8</c> es un poco extraño como un primer ejemplo, ya que tiene dos operaciones definidas, tanto suma como producto, con la suma forma un grupo, pero no así con el producto.  Aún así, podemos trabajar con la parte aditiva, formando acá la tabla de las sumas.</p>

		<sage>
			<input>Z8.addition_table(names='elements')</input>
			<output>
			+  0 1 2 3 4 5 6 7
			 +----------------
			0| 0 1 2 3 4 5 6 7
			1| 1 2 3 4 5 6 7 0
			2| 2 3 4 5 6 7 0 1
			3| 3 4 5 6 7 0 1 2
			4| 4 5 6 7 0 1 2 3
			5| 5 6 7 0 1 2 3 4
			6| 6 7 0 1 2 3 4 5
			7| 7 0 1 2 3 4 5 6
			</output>
		</sage>

		<p>Cuando <m>n</m> es un número primo, la estructura multiplicativa (sin el cero), también forma un grupo.</p>

		<p>Los enteros  mód <m>n</m> son muy importantes, y Sage implementa tanto la multiplicación como la adición en ellos.  Grupos de simetrías son un mejor ejemplo de como Sage implementa grupos, pues hay solo una operación presente.</p>

		<sage type="practice" />

	</subsection>

	<subsection xml:id="subsection-groups-of-symmetries">
		<title>Grupos de simetrías</title>

		<p>Los grupos de simetrías de algunos objetos geométricos ya están definidos en Sage, aunque con nombres diferentes.  Están implementados como <q>grupos de permutaciones (permutation groups)</q> los que empezaremos a estudiar cuidadosamente en el Capítulo<nbsp /><xref ref="permute" />.</p>

		<p>Sage usa enteros para etiquetar los vértices, empezando a contar desde <c>1</c>, en lugar de letras.  Los elementos normalmente se muestran en <q>notación cíclica (cycle notation)</q> que veremos descrita en detalle en el Capítulo<nbsp /><xref ref="permute" />.    Acá hay un ejemplo, que incluye tanto matemáticas como Sage.  Para la parte de Sage, construimos el grupo de simetrías y luego creamos la simetría <m>\rho_2</m> por coerción, desplegando a continuación el elemento en notación cíclica.  Después creamos la <em>fila inferior</em> de la notación que hemos usado para las permutaciones.  <me>\rho_2=
		\begin{pmatrix}<![CDATA[
		A & B & C\\
		C & A & B
		]]>\end{pmatrix}
		=
		\begin{pmatrix}<![CDATA[
		1 & 2 & 3\\
		3 & 1 & 2
		]]>\end{pmatrix}</me>
		</p>

		<sage>
			<input>
			triangle = SymmetricGroup(3)
			rho2 = triangle([3,1,2])
			rho2
			</input>
			<output>(1,3,2)</output>
		</sage>

		<sage>
			<input>[rho2(x) for x in triangle.domain()]</input>
			<output>[3, 1, 2]</output>
		</sage>

		<p>La última lista merece un comentario.  El método <c>.domain()</c> entrega una lista de los símbolos usados para el grupo de permutaciones <c>triangle</c> y luego <c>rho2</c> se usa como si fuera una función (lo <em>es</em>) para crear las imágenes que ocuparían la fila inferior.</p>

		<p>Con una lista doble podemos listar los seis elementos del grupo en el formato de <q>fila inferior</q>.  Un buen ejercicio es identificar cada elemento con el nombre que le dimos en la Figura<nbsp /><xref ref="figure-s3-symmetry" />.</p>

        <sage>
            <input>[[a(x) for x in triangle.domain()] for a in triangle]</input>
            <output>[[1, 2, 3], [2, 1, 3], [2, 3, 1], [3, 1, 2], [1, 3, 2], [3, 2, 1]]</output>
        </sage>

		<p>Diferentes libros, diferentes autores, diferentes programas de computadora todos tienen ideas diferentes sobre el orden en que se deben escribir las permutaciones para componerlas.  Este libro se basa en la idea tradicional de composición de funciones, de manera que <m>fg</m> es la composición <m>(fg)(x)=f(g(x))</m> y es natural aplicar <m>g</m> primero.  Sage toma el punto de vista opuesto y por <m>fg</m>, Sage entenderá que queremos hacer <m>f</m> primero.  Ninguna de las dos postura es incorrecta y ninguna es necesariamente superior, son simplemente diferentes y hay buenas razones para preferir una o la otra.  Cuando lea otros libros que trabajan con grupos de permutaciones, deberá determinar primero cuál es la elección utilizada. (Note que esta discusión sobre la composición de funciones en Sage, se limita a la composición de permutaciones, pues las funciones <mdash /><q>regulares</q>, Sage las compone de la forma en que estamos acostumbrados.)</p>

		<p>La traducción hecha acá entre el texto y Sage es una práctica valiosa.  Reanudaremos la discusión al final de la Sección<nbsp /><xref ref="section-mod-n-sym" />, pero revierta el orden de cada producto para calcular como lo haría Sage imitando lo que hace el texto.</p>

		<sage>
			<input>
			mu1 = triangle([1,3,2])
			mu2 = triangle([3,2,1])
			mu3 = triangle([2,1,3])
			rho1 = triangle([2,3,1])
			product = rho1*mu1
			product == mu2
			</input>
			<output>True</output>
		</sage>

		<sage>
			<input>[product(x) for x in triangle.domain()]</input>
			<output>[3, 2, 1]</output>
		</sage>

		<sage>
			<input>rho1*mu1 == mu1*rho1</input>
			<output>False</output>
		</sage>

		<sage>
			<input>mu1*rho1 == mu3</input>
			<output>True</output>
		</sage>

		<p>Ahora que entendemos que Sage calcula los productos al revés, podemos obtener la tabla de multiplicación para este grupo.  El comportamiento por defecto es usar letras para referirse a los elementos de un grupo, <c>a, b, c, \dots{}</c> en el mismo orden que les daría el comando <c>.list()</c> al listar los elementos del grupo.  Pero también es posible mostrar explícitamente los elementos en la tabla (con notación cíclica en este caso),  puede darle los nombres que desee a los elementos.  Usaremos <c>u</c> como abreviación de  <m>\mu</m> y <c>r</c> para <m>\rho</m>.</p>

        <sage>
            <input>triangle.cayley_table()</input>
            <output>
            *  a b c d e f
             +------------
            a| a b c d e f
            b| b a f e d c
            c| c e d a f b
            d| d f a c b e
            e| e c b f a d
            f| f d e b c a
            </output>
        </sage>

        <sage>
            <input>triangle.cayley_table(names='elements')</input>
            <output>
                  *       ()   (1,2) (1,2,3) (1,3,2)   (2,3)   (1,3)
                   +------------------------------------------------
                 ()|      ()   (1,2) (1,2,3) (1,3,2)   (2,3)   (1,3)
              (1,2)|   (1,2)      ()   (1,3)   (2,3) (1,3,2) (1,2,3)
            (1,2,3)| (1,2,3)   (2,3) (1,3,2)      ()   (1,3)   (1,2)
            (1,3,2)| (1,3,2)   (1,3)      () (1,2,3)   (1,2)   (2,3)
              (2,3)|   (2,3) (1,2,3)   (1,2)   (1,3)      () (1,3,2)
              (1,3)|   (1,3) (1,3,2)   (2,3)   (1,2) (1,2,3)      ()
            </output>
        </sage>

        <sage>
            <input>triangle.cayley_table(names=['id','u3','r1','r2','u1','u2'])</input>
            <output>
             *  id u3 r1 r2 u1 u2
              +------------------
            id| id u3 r1 r2 u1 u2
            u3| u3 id u2 u1 r2 r1
            r1| r1 u1 r2 id u2 u3
            r2| r2 u2 id r1 u3 u1
            u1| u1 r1 u3 u2 id r2
            u2| u2 r2 u1 u3 r1 id
            </output>
        </sage>

		<p>Usted debiera verificar que esta tabla está correcta, así como la tabla en el Cuadro<nbsp /><xref ref="table-s3" /> está correcta.  Recuerde que la convención es multiplicar la etiqueta de la columna por la de la fila, en ese orden.  Pero, para hacer una verificación entre las tablas, deberá recordar la diferencia de orden entre el texto y Sage.</p>

		<sage type="practice" />

	</subsection>

	<subsection>
		<title>Cuaterniones</title>

		<p>Sage implementa los cuaterniones, pero los elementos no son matrices, sino permutaciones.  A pesar de las apariencias, la estructura es idéntica.  No debería importar que versión tiene en mente (matrices o permutaciones) si construye la tabla de  Cayley usando letras para etiquetar los elementos.  Como permutaciones, o como letras, ¿puede identificar <m>-1</m>, <m>I</m>, <m>J</m> y <m>K</m>?</p>

		<sage>
			<input>
			Q = QuaternionGroup()
			[[a(x) for x in Q.domain()] for a in Q]
			</input>
			<output>
            [[1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 1, 6, 7, 8, 5],
             [5, 8, 7, 6, 3, 2, 1, 4], [3, 4, 1, 2, 7, 8, 5, 6],
             [6, 5, 8, 7, 4, 3, 2, 1], [8, 7, 6, 5, 2, 1, 4, 3],
             [4, 1, 2, 3, 8, 5, 6, 7], [7, 6, 5, 8, 1, 4, 3, 2]]
			</output>
		</sage>

		<sage>
			<input>Q.cayley_table()</input>
			<output>
            *  a b c d e f g h
             +----------------
            a| a b c d e f g h
            b| b d f g c h a e
            c| c e d h g b f a
            d| d g h a f e b c
            e| e h b f d a c g
            f| f c g e a d h b
            g| g a e b h c d f
            h| h f a c b g e d
			</output>
		</sage>

		<p>Debiera ser bastante obvio que <c>a</c> es el elemento identidad del grupo (<m>1</m>), ya sea por su comportamiento en la tabla, o por su representación de  <q>fila inferior</q> como el primer elemento de la lista anterior.  Y si lo prefiere, puede pedirle a Sage una lista de sus imágenes cuando es considerado como una función.</p>

		<sage>
			<input>
			id = Q.identity()
			[id(x) for x in Q.domain()]
			</input>
			<output>[1, 2, 3, 4, 5, 6, 7, 8]</output>
		</sage>

		<p>Ahora <m>-1</m> debería tener la propiedad de que <m>-1\cdot -1= 1</m>.  Vemos que el elemento identidad  <c>a</c> está en la diagonal de la tabla de  Cayley solo cuando calculamos <c>d*d</c>.  Esto lo podemos verificar fácilmente, tomado la cuarta  <q>fila inferior</q> de la lista anterior.  Con esta información, una vez que hemos localizado  <m>I</m>, podemos fácilmente calcular  <m>-I</m>, y así sucesivamente.</p>

		<sage>
			<input>
			minus_one = Q([3, 4, 1, 2, 7, 8, 5, 6])
			minus_one*minus_one == Q.identity()
			</input>
			<output>True</output>
		</sage>

		<p>Vea si es capaz de identificar las letras con los ocho elementos de los cuaterniones.  Tenga un poco de cuidado con los nombres que use, pues el símbolo  <c>I</c> is es usado por Sage para el número imaginario <m>i=\sqrt{-1}</m> (que utilizaremos más adelante), pero Sage le permitirá redefinirlo como cualquier cosa que quiera, sin una advertencia.  Lo mismo vale para el uso de la  <c>i</c> minúscula en Sage.  De manera que mejor llame algo como <c>QI, QJ, QK</c> a los elementos de los cuaterniones para evitar confusión.</p>

		<p>En la medida en que empezamos a trabajar con grupos, es instructivo trabajar con sus elementos.  Pero muchas propiedades de los grupos son independientes del orden usado para la multiplicación, y de los nombres o representaciones que usemos para los elementos.  Aquí mencionaremos algunos hechos sobre los cuaterniones que podemos calcular directamente sin tener información alguna sobre cómo se escriben los elementos o cómo se multiplican.</p>

		<sage>
			<input>Q.is_finite()</input>
			<output>True</output>
		</sage>

		<sage>
			<input>Q.order()</input>
			<output>8</output>
		</sage>

		<sage>
			<input>Q.is_abelian()</input>
			<output>False</output>
		</sage>

		<sage type="practice" />

	</subsection>

	<subsection>
		<title>Subgrupos</title>

		<p>Las mejores técnicas para la creación de subgrupos vendrán en capítulos posteriores, pero ya ahora podemos crear algunos grupos que son naturalmente subgrupos de otros.</p>

		<p>Los elementos de los cuaterniones fueron representados por ciertas permutaciones de los enteros del 1 al 8.  Podemos también crear el grupo de  <em>todas</em> las permutaciones de estos ocho enteros.  Esto se hace bastante grande, así es que no los liste a menos que desee obtener una respuesta muy larga!  (Lo desafío a hacerlo.)</p>

		<sage>
			<input>
			S8 = SymmetricGroup(8)
			a = S8.random_element()
			[a(x) for x in S8.domain()]     # random
			</input>
			<output>[5, 2, 6, 4, 1, 8, 3, 7]</output>
		</sage>

		<sage>
			<input>S8.order()</input>
			<output>40320</output>
		</sage>

		<p>El grupo de los cuaterniones, <c>Q</c>, es un subgrupo del grupo de todas las permutaciones, el grupo simétrico <m>S_8</m> o <c>S8</c>, y Sage considera esto como una propiedad de <c>Q</c>.</p>

		<sage>
			<input>Q.is_subgroup(S8)</input>
			<output>True</output>
		</sage>

		<p>En Sage los números complejos se conocen por el nombre <c>CC</c>.  Podemos crear una lista de los elementos en el  subgrupodescrito en el Ejemplo<nbsp /><xref ref="example-groups-c-star" />.  Podemos luego verificar que este conjunto es un subgrupo examinando la tabla de Cayley, usando la multiplicación como operación.</p>

		<sage>
			<input>
			H = [CC(1), CC(-1), CC(I), CC(-I)]
			CC.multiplication_table(elements=H,
			                        names=['1', '-1', 'i', '-i'])
			</input>
			<output>
			*   1 -1  i -i
			  +------------
			 1|  1 -1  i -i
			-1| -1  1 -i  i
			 i|  i -i -1  1
			-i| -i  i  1 -1
			</output>
		</sage>

		<sage type="practice" />

	</subsection>
</section>